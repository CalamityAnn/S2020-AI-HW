/*
  Assignment 3: The Zebra Problem
  Class: AI Principles and Applications
  Group: Cam Skubik-Peplaski and Nicholas Steinmetz
*/

/* ------------------------------------------------------------ */

% Checks STREET setup against base conditions
  % (HouseColor Nationality Candy Drink Pet)
((base STREET)
  % Englishman lives in red house
  (onStreet ( Red Englishman _ _ _ ) STREET)

  % Spaniard owns a dog
  (onStreet ( _ Spaniard _ _ Dog ) STREET)

  % Norwegian lives in the first house on the left
  (first ( _ Norwegian _ _ _ ) STREET)

  % Green house is immediately to right of ivory house
  (rightOf ( Green _ _ _ _ ) ( Ivory _ _ _ _ ) STREET)

  % Man who eats Hershey-bars lives next to man with fox
  (adjacent ( _ _ Hersheys _ _ ) ( _ _ _ _ Fox ) STREET)

  % Kit-Kats are eaten in the yellow house
  (onStreet ( Yellow _ KitKats _ _ ) STREET)

  % Norwegian lives next to the blue house
  (adjacent ( _ Norwegian _ _ _ ) ( Blue _ _ _ _ ) STREET)

  % Smarties eater owns snails
  (onStreet ( _ _ Smarties _ Snails ) STREET)

  % Snickers eater drinks orange juice
  (onStreet ( _ _ Snickers OrangeJ _ ) STREET)

  % Ukranian drinks tea
  (onStreet ( _ Ukranian _ Tea _ ) STREET)

  % Japanese eats milky-ways
  (onStreet ( _ Japanese MilkyWays _ _ ) STREET)

  % Kit-kats are eaten in a house next to the house where the horse is kept
  (adjacent ( _ _ KitKats _ _ ) ( _ _ _ _ Horse ) STREET)

  % Coffee is drunk in the green house
  (onStreet ( Green _ _ Coffee _ ) STREET)

  % Milk is drunk in the middle house
  (middle ( _ _ _ Milk _ ) STREET)
)

((extra STREET)
  % Make sure there's a zebra somewhere
  (onStreet ( _ _ _ _ Zebra) STREET)

  % Make sure there's wine somewhere
  (onStreet ( _ _ _ Wine _ ) STREET)
)

/*
  Utility predicates from list_pro
*/
% MEMBER
  % the head of a list is an element of that list
((member H ( H|_ )))
  % otherwise, E is an element of the list if it
((member E ( _|T ))
	  % is an element of its tail
	(member E T))

/*
(length LIST N) holds when N is the length of (number of elements in)
 the list LIST:
    The length of a non empty list is 1 + length of its tail;
    The length of an empty list is 0. 
    The length predicate makes use of the built in predicate sum  (sum X Y Z) holds when it is true 
    that X+Y is equal to Z
*/
((length () 0 ))
((length (_|T) N)
  (length T N1)
  (sum N1 1 N))


% Checks if X is on the street
((onStreet X (X _ _ _ _)))
((onStreet X (_ X _ _ _)))
((onStreet X (_ _ X _ _)))
((onStreet X (_ _ _ X _)))
((onStreet X (_ _ _ _ X)))

% Checks if X is right of Y -> specifically used for statement number 4 in this assignment
((rightOf X X _) (fail))
((rightOf X Y ( Y X _ _ _ ) ))
((rightOf X Y ( _ Y X _ _ ) ))
((rightOf X Y ( _ _ Y X _ ) ))
((rightOf X Y ( _ _ _ Y X ) ))

% Checks if X and Y are adjacent in list N
((adjacent X Y N)
  (rightOf X Y N))
((adjacent X Y N)
  (rightOf Y X N))

% Checks if X is first in street
((first X (X _ _ _ _) ))
% Checks if X is in the middle of street
((middle X (_ _ X _ _) ))
% Checks if X is last in street
((last X (_ _ _ _ X) ))

% Checks if we've already done a query,
% if not, add to knowledgebase
((decide QUALITY WHO WHAT)
  (QUALITY WHO WHAT)(!) )
((decide QUALITY WHO WHAT)
  (addcl ((QUALITY WHO WHAT)) ))

% Solves Zebra puzzle
((solveZebra P) (solved P))
((solveZebra P)
  % kill old solution & known query results
  (kill solved)
  (kill knownColor)
  (kill knownDrunkIn)
  (kill knownEatenIn)
  (kill knownPet)
  (kill knownToDrink)
  (kill knownToEat)
  (kill knownPetIn)

  % solve
  (base P)
  (extra P)
  (forall ((member H P)) (
    (pp H)
  ))

  % assert solution into state
  (addcl ((solved P)) ))

% Color <-> Nationality Query
((isColored WHO WHAT)
  (knownColor WHO WHAT)(!) )
((isColored WHO WHAT)
  (solveZebra P)(member (WHAT WHO _ _ _) P)
  (decide knownColor WHO WHAT))

% Drink <-> Nationality query
((drinks WHO WHAT)
  (knownToDrink WHO WHAT)(!) )
((drinks WHO WHAT)
  (puzzle P)(member (_ WHO _ WHAT _) P)
  (decide knownToDrink WHO WHAT))

% Candy <-> Nationality query
((eats WHO WHAT)
  (knownToEat WHO WHAT)(!) )
((eats WHO WHAT)
  (solveZebra P)(member (_ WHO WHAT _ _) P)
  (decide knownToEat WHO WHAT))

% Pet <-> Nationality query
((hasPet WHO WHAT)
  (knownPet WHO WHAT)(!) )
((hasPet WHO WHAT)
  (solveZebra P)(member (_ WHO _ _ WHAT) P)
  (decide knownPet WHO WHAT))


% Drink <-> House query
((drunkIn WHAT WHERE)
  (knownDrunkIn WHERE WHAT)(!) )
((drunkIn WHAT WHERE)
  (solveZebra P)(member (WHERE _ _ WHAT _) P)
  (decide knownDrunkIn WHERE WHAT))

% Candy <-> House query
((eatenIn WHAT WHERE)
  (knownEatenIn WHERE WHAT)(!) )
((eatenIn WHAT WHERE)
  (solveZebra P)(member (WHERE _ WHAT _ _) P)
  (decide knownEatenIn WHERE WHAT))

% Pet <-> House query
((petIn WHAT WHERE)
  (knownPetIn WHERE WHAT)(!) )
((petIn WHAT WHERE)
  (solveZebra P)(member (WHERE _ _ _ WHAT) P)
  (decide knownPetIn WHERE WHAT))


% Printing Functions
((printColor X)
	(p "lives in the" X "colored home")
	(pp " "))

((printCandy X)
	(p "eats" X)
	(pp " "))

((printDrink X)
	(p "drinks" X)
	(pp " "))

((printNationality X)
	(p "is" X)
	(pp " "))

((printPet X)
	(p "has the" X)
	(pp " "))